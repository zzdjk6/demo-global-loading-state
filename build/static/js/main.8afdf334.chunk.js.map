{"version":3,"sources":["store/domain-data/demo-data/ducks.ts","store/ui/loading/ducks.ts","store/domain-data/error/ducks.ts","components/App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["routine1","createThunkRoutine","routine2","routine3","wait","ms","Promise","resolve","setTimeout","fetchData1","getThunkActionCreator","a","makeError","Error","fetchData2","fetchData3","selectLoadingState","state","ui","loading","selectAnyLoading","createSelector","Object","values","some","val","selectErrorState","domainData","error","selectError","routineType","App","dispatch","useDispatch","isAnyLoading","useSelector","isLoading1","isLoading1or2","routineTypes","error1","error2","error3","useState","setMakeError","className","type","checked","onChange","event","target","Button","onClick","catch","console","Spinner","color","message","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","matches","exec","status","demoData","payload","store","createStore","applyMiddleware","thunk","logger","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8afdf334.chunk.js","sourcesContent":["import { Action } from \"redux-actions\";\nimport { createThunkRoutine, getThunkActionCreator } from \"redux-thunk-routine\";\n\n// State\ntype State = {};\n\n// Routines\nexport const routine1 = createThunkRoutine<number>('DEMO_ROUTINE1');\nexport const routine2 = createThunkRoutine<number>('DEMO_ROUTINE2');\nexport const routine3 = createThunkRoutine<number>('DEMO_ROUTINE3');\n\nconst wait = (ms: number) => new Promise(resolve => setTimeout(() => resolve(), ms));\n\n// Thunks\nexport const fetchData1 = getThunkActionCreator(routine1, async (makeError: boolean = false) => {\n  await wait(1000);\n  if (makeError) {\n    throw new Error('Fetch Data1 Error!');\n  }\n  return 1;\n});\n\nexport const fetchData2 = getThunkActionCreator(routine2, async (makeError: boolean = false) => {\n  await wait(2000);\n  if (makeError) {\n    throw new Error('Fetch Data2 Error!');\n  }\n  return 2;\n});\n\nexport const fetchData3 = getThunkActionCreator(routine3, async (makeError: boolean = false) => {\n  await wait(3000);\n  if (makeError) {\n    throw new Error('Fetch Data3 Error!');\n  }\n  return 3;\n});\n\n// Reducer\nexport default (state: State = {}, action: Action<any>): State => {\n  return state;\n};\n","// To know more about ducks, see https://github.com/erikras/ducks-modular-redux\n\nimport { Action } from 'redux-actions';\nimport { RootState } from '../../store';\nimport { createSelector } from 'reselect';\n\n// State\n\n// To know more about Record type, see https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkt\nexport type LoadingState = Record<string, boolean>;\n\n// Reducer\n\nexport default (state: LoadingState = {}, action: Action<any>): LoadingState => {\n  const { type } = action;\n  const matches = /(.*)\\/(REQUEST|SUCCESS|FAILURE)/.exec(type);\n\n  // Ignore non-routine actions:\n  //   A routine action should have one of three suffixes:\n  //   ['/REQUEST', '/SUCCESS', '/FAILURE']\n  if (!matches) return state;\n\n  const [, routineType, status] = matches;\n  return {\n    ...state,\n    // Set loading state to true only when the status is \"REQUEST\"\n    //    Otherwise set the loading state to false\n    [routineType]: status === 'REQUEST'\n  };\n};\n\n// Selectors\n\n// Select the whole loading state object\nexport const selectLoadingState = (state: RootState) => state.ui.loading;\n\n// Select whether a given routine is loading\nexport const selectLoading = (routineType: string) => {\n  return createSelector([selectLoadingState], (state: LoadingState) => {\n    return !!state[routineType];\n  });\n};\n\n// Select whether any routine is loading\nexport const selectAnyLoading = createSelector([selectLoadingState], (state: LoadingState) => {\n  return Object.values(state).some(val => val);\n});\n\n// Select whether a given set of routines are loading\nexport const selectSomeLoading = (routineTypes: Array<string>) => {\n  return createSelector([selectLoadingState], (state: LoadingState) => {\n    return routineTypes.some(routineType => state[routineType]);\n  });\n};\n","// To know more about ducks, see https://github.com/erikras/ducks-modular-redux\n\nimport { Action } from 'redux-actions';\nimport { RootState } from '../../store';\nimport { createSelector } from 'reselect';\n\n// State\n\n// To know more about Record type, see https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkt\nexport type ErrorState = Record<string, Error | null>;\n\n// Reducer\n\nexport default (state: ErrorState = {}, action: Action<any>): ErrorState => {\n  const { type } = action;\n  const matches = /(.*)\\/(REQUEST|SUCCESS|FAILURE)/.exec(type);\n\n  // Ignore non-routine actions:\n  //   A routine action should have one of three suffixes:\n  //   ['/REQUEST', '/SUCCESS', '/FAILURE']\n  if (!matches) return state;\n\n  const [, routineType, status] = matches;\n\n  return {\n    ...state,\n    // Set error state to the payload only when the status is \"FAILURE\"\n    //    Otherwise set the error state to null\n    [routineType]: status === 'FAILURE' ? action.payload : null\n  };\n};\n\n// Selectors\n\n// Select the whole error state\nexport const selectErrorState = (state: RootState) => state.domainData.error;\n\n// Select error for a given routine\nexport const selectError = (routineType: string) => {\n  return createSelector([selectErrorState], (state: ErrorState) => {\n    return state[routineType];\n  });\n};\n","import React, { useState, ChangeEvent } from 'react';\nimport { Button, Spinner } from 'reactstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchData1, fetchData2, fetchData3, routine1, routine2, routine3 } from '../store/domain-data/demo-data/ducks';\nimport { RootState } from '../store/store';\nimport { selectAnyLoading, selectLoading, selectSomeLoading } from '../store/ui/loading/ducks';\nimport { selectError } from '../store/domain-data/error/ducks';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch<any>();\n\n  // Select loading\n  const isAnyLoading = useSelector((state: RootState) => selectAnyLoading(state));\n  const isLoading1 = useSelector((state: RootState) => selectLoading(routine1.routineType)(state));\n  const isLoading1or2 = useSelector((state: RootState) =>\n    selectSomeLoading([routine1.routineType, routine2.routineType])(state)\n  );\n\n  // Select error\n  const error1 = useSelector((state: RootState) => selectError(routine1.routineType)(state));\n  const error2 = useSelector((state: RootState) => selectError(routine2.routineType)(state));\n  const error3 = useSelector((state: RootState) => selectError(routine3.routineType)(state));\n\n  const [makeError, setMakeError] = useState(false);\n\n  return (\n    <div className=\"container-fluid pt-3\">\n      <div className=\"px-3 mb-3\">\n        <div className=\"form-check\">\n          <label className=\"form-check-label\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              checked={makeError}\n              onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                setMakeError(event.target.checked);\n              }}\n            />\n            Make Error\n          </label>\n        </div>\n      </div>\n      <div className=\"px-3 mb-3\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <Button className=\"w-100 mb-3\" onClick={() => dispatch(fetchData1(makeError)).catch(console.error)}>\n              Fetch 1\n            </Button>\n          </div>\n          <div className=\"col\">\n            <Button className=\"w-100 mb-3\" onClick={() => dispatch(fetchData2(makeError)).catch(console.error)}>\n              Fetch 2\n            </Button>\n          </div>\n          <div className=\"col\">\n            <Button className=\"w-100 mb-3\" onClick={() => dispatch(fetchData3(makeError)).catch(console.error)}>\n              Fetch 3\n            </Button>\n          </div>\n        </div>\n      </div>\n      <div className=\"px-3 mb-3\">\n        {isAnyLoading && (\n          <div className=\"w-100\">\n            <Spinner color=\"primary\" /> Loading...\n          </div>\n        )}\n        {isLoading1 && (\n          <div className=\"w-100\">\n            <Spinner color=\"secondary\" /> Loading routine 1...\n          </div>\n        )}\n        {isLoading1or2 && (\n          <div className=\"w-100\">\n            <Spinner color=\"info\" /> Loading routine 1 or 2...\n          </div>\n        )}\n      </div>\n      <div className=\"px-3 mb-3\">\n        <ul className=\"p-0 m-0\">\n          <li>Error 1: {error1 ? error1.message : 'null'}</li>\n          <li>Error 2: {error2 ? error2.message : 'null'}</li>\n          <li>Error 3: {error3 ? error3.message : 'null'}</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport loadingReducer from './ui/loading/ducks';\nimport demoDataReducer from './domain-data/demo-data/ducks';\nimport errorReducer from './domain-data/error/ducks';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n  ui: combineReducers({\n    loading: loadingReducer\n  }),\n  domainData: combineReducers({\n    demoData: demoDataReducer,\n    error: errorReducer\n  })\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nconst state = store.getState();\n\nexport type RootState = typeof state;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/store\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}