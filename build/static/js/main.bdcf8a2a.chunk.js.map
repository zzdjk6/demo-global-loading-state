{"version":3,"sources":["store/domain-data/demo-data/ducks.ts","store/ui/loading/ducks.ts","components/App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["routine1","createThunkRoutine","routine2","routine3","selectLoadingState","state","ui","loading","selectAnyLoading","createSelector","Object","values","some","val","App","dispatch","useDispatch","isAnyLoading","useSelector","isLoading1","routineType","actionType","isLoading1n2","routineTypes","className","Button","onClick","a","request","setTimeout","success","failure","Spinner","color","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","type","matches","exec","status","domainData","demoData","store","createStore","applyMiddleware","thunk","logger","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdcf8a2a.chunk.js","sourcesContent":["import { Action } from \"redux-actions\";\nimport { createThunkRoutine } from \"redux-thunk-routine\";\nimport { Dispatch } from \"redux\";\n\n// State\ntype State = {};\n\n// Routines\nexport const routine1 = createThunkRoutine<number, Error>(\"DEMO_ROUTINE1\");\nexport const routine2 = createThunkRoutine<number, Error>(\"DEMO_ROUTINE2\");\nexport const routine3 = createThunkRoutine<number, Error>(\"DEMO_ROUTINE3\");\n\n// Actions\nexport const fetchData1 = () => async (dispatch: Dispatch) => {\n  dispatch(routine1.request());\n  try {\n    setTimeout(() => {\n      dispatch(routine1.success(1));\n    }, 1000);\n  } catch (e) {\n    dispatch(routine1.failure(e));\n    throw e;\n  }\n};\n\nexport const fetchData2 = () => async (dispatch: Dispatch) => {\n  dispatch(routine2.request());\n  try {\n    setTimeout(() => {\n      dispatch(routine2.success(2));\n    }, 2000);\n  } catch (e) {\n    dispatch(routine2.failure(e));\n    throw e;\n  }\n};\n\nexport const fetchData3 = () => async (dispatch: Dispatch) => {\n  dispatch(routine3.request());\n  try {\n    setTimeout(() => {\n      dispatch(routine3.success(3));\n    }, 3000);\n  } catch (e) {\n    dispatch(routine3.failure(e));\n    throw e;\n  }\n};\n\n// Reducer\nexport default (state: State = {}, action: Action<any>): State => {\n  return state;\n};\n","import { Action } from \"redux-actions\";\nimport { RootState } from \"../../store\";\nimport { createSelector } from \"reselect\";\n\n// State\nexport type LoadingState = {\n  [key: string]: boolean;\n};\n\n// Reducer\nexport default (\n  state: LoadingState = {},\n  action: Action<any>\n): LoadingState => {\n  const { type } = action;\n  const matches = /(.*)\\/(REQUEST|SUCCESS|FAILURE)/.exec(type);\n\n  // Ignore non-routine actions:\n  //   A routine action should have one of three suffixes: ['/REQUEST', '/SUCCESS', '/FAILURE']\n  if (!matches) return state;\n\n  const [, routineType, status] = matches;\n  return {\n    ...state,\n    // Set loading state to true only when the status is \"REQUEST\"\n    //    Otherwise set the loading state to false\n    [routineType]: status === \"REQUEST\"\n  };\n};\n\n// Selectors\nexport const selectLoadingState = (state: RootState) => state.ui.loading;\n\nexport const selectLoading = (routineType: string) =>\n  createSelector(\n    [selectLoadingState],\n    (state: LoadingState) => {\n      return !!state[routineType];\n    }\n  );\n\nexport const selectAnyLoading = createSelector(\n  [selectLoadingState],\n  (state: LoadingState) => {\n    return Object.values(state).some(val => val);\n  }\n);\n\nexport const selectSomeLoading = (routineTypes: Array<string>) =>\n  createSelector(\n    [selectLoadingState],\n    (state: LoadingState) => {\n      return routineTypes.some(routineType => state[routineType]);\n    }\n  );\n","import React from \"react\";\nimport { Button, Spinner } from \"reactstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  fetchData1,\n  fetchData2,\n  fetchData3,\n  routine1,\n  routine2\n} from \"../store/domain-data/demo-data/ducks\";\nimport { RootState } from \"../store/store\";\nimport {\n  selectAnyLoading,\n  selectLoading,\n  selectSomeLoading\n} from \"../store/ui/loading/ducks\";\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const isAnyLoading = useSelector((state: RootState) =>\n    selectAnyLoading(state)\n  );\n\n  const isLoading1 = useSelector((state: RootState) =>\n    selectLoading(routine1.actionType)(state)\n  );\n\n  const isLoading1n2 = useSelector((state: RootState) =>\n    selectSomeLoading([routine1.actionType, routine2.actionType])(state)\n  );\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"px-3 pt-3\">\n        <Button className=\"w-100 mb-3\" onClick={() => dispatch(fetchData1())}>\n          Fetch 1\n        </Button>\n        <Button className=\"w-100 mb-3\" onClick={() => dispatch(fetchData2())}>\n          Fetch 2\n        </Button>\n        <Button className=\"w-100 mb-3\" onClick={() => dispatch(fetchData3())}>\n          Fetch 3\n        </Button>\n      </div>\n      <div className=\"px-3\">\n        {isAnyLoading && (\n          <div className=\"w-100\">\n            <Spinner color=\"primary\" /> Loading...\n          </div>\n        )}\n        {isLoading1 && (\n          <div className=\"w-100\">\n            <Spinner color=\"secondary\" /> Loading routine 1...\n          </div>\n        )}\n        {isLoading1n2 && (\n          <div className=\"w-100\">\n            <Spinner color=\"info\" /> Loading routine 1 and 2...\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport loadingReducer from \"./ui/loading/ducks\";\nimport demoDataReducer from \"./domain-data/demo-data/ducks\";\nimport logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nconst rootReducer = combineReducers({\n  ui: combineReducers({\n    loading: loadingReducer\n  }),\n  domainData: combineReducers({\n    demoData: demoDataReducer\n  })\n});\n\nexport const store = createStore(\n  rootReducer,\n  applyMiddleware(thunk, logger)\n);\n\nconst state = store.getState();\n\nexport type RootState = typeof state;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/store\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}