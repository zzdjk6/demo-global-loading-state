{"version":3,"sources":["store/domain-data/demo-data/ducks.ts","store/ui/loading/ducks.ts","store/domain-data/error/ducks.ts","components/App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["routineA","createThunkRoutine","routineB","wait","ms","Promise","resolve","setTimeout","fetchDataA","getThunkActionCreator","a","makeError","Error","fetchDataB","selectLoading","routineType","state","Boolean","ui","loading","selectAnyLoading","Object","values","some","selectError","domainData","error","App","dispatch","useDispatch","isLoadingAny","useSelector","isLoadingA","isLoadingB","errorA","errorB","useState","setMakeError","className","Card","CardHeader","CardBody","type","checked","onChange","event","target","Button","color","onClick","catch","console","Table","bordered","size","width","Spinner","message","window","location","hostname","match","rootReducer","combineReducers","action","matches","exec","status","demoData","payload","store","createStore","applyMiddleware","thunk","logger","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68e17e17.chunk.js","sourcesContent":["import { Action } from 'redux-actions';\nimport { createThunkRoutine, getThunkActionCreator } from 'redux-thunk-routine';\n\n// State\ntype State = {};\n\n// Routines\nexport const routineA = createThunkRoutine<number>('DATA/A/FETCH');\nexport const routineB = createThunkRoutine<number>('DATA/B/FETCH');\n\nconst wait = (ms: number) => new Promise(resolve => setTimeout(() => resolve(), ms));\n\n// Thunks\nexport const fetchDataA = getThunkActionCreator(routineA, async (makeError: boolean = false) => {\n  await wait(1500);\n  if (makeError) {\n    throw new Error('Fetch Data A Error!');\n  }\n  return 1;\n});\n\nexport const fetchDataB = getThunkActionCreator(routineB, async (makeError: boolean = false) => {\n  await wait(3000);\n  if (makeError) {\n    throw new Error('Fetch Data B Error!');\n  }\n  return 2;\n});\n\n// Reducer\nexport default (state: State = {}, action: Action<any>): State => {\n  return state;\n};\n","// To know more about ducks, see https://github.com/erikras/ducks-modular-redux\n\nimport { Action } from 'redux-actions';\nimport { RootState } from '../../store';\n\n// State\n\n// To know more about Record type, see https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkt\nexport type LoadingState = Record<string, boolean>;\n\n// Reducer\n\nexport default (state: LoadingState = {}, action: Action<any>): LoadingState => {\n  const { type } = action;\n  const matches = /(.*)\\/(REQUEST|SUCCESS|FAILURE)/.exec(type);\n\n  // Ignore non-routine actions:\n  //   A routine action should have one of three suffixes:\n  //   ['/REQUEST', '/SUCCESS', '/FAILURE']\n  if (!matches) return state;\n\n  const [, routineType, status] = matches;\n  return {\n    ...state,\n    // Set loading state to true only when the status is \"REQUEST\"\n    //    Otherwise set the loading state to false\n    [routineType]: status === 'REQUEST'\n  };\n};\n\n// Selectors\n\n// Select the whole loading state object\nexport const selectLoadingState = (state: RootState) => state.ui.loading;\n\n// Select whether a given routine is loading\nexport const selectLoading = (routineType: string) => (state: RootState) => {\n  return Boolean(state.ui.loading[routineType]);\n};\n\n// Select whether any routine is loading\nexport const selectAnyLoading = (state: RootState) => Object.values(state.ui.loading).some(Boolean);\n\n// Select whether any of a given set of routines is loading\nexport const selectSomeLoading = (routineTypes: string[]) => (state: RootState) => {\n  return routineTypes.some(routineType => Boolean(state.ui.loading[routineType]));\n};\n","// To know more about ducks, see https://github.com/erikras/ducks-modular-redux\n\nimport { Action } from 'redux-actions';\nimport { RootState } from '../../store';\n\n// State\n\n// To know more about Record type, see https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkt\nexport type ErrorState = Record<string, Error | null>;\n\n// Reducer\n\nexport default (state: ErrorState = {}, action: Action<any>): ErrorState => {\n  const { type } = action;\n  const matches = /(.*)\\/(REQUEST|SUCCESS|FAILURE)/.exec(type);\n\n  // Ignore non-routine actions:\n  //   A routine action should have one of three suffixes:\n  //   ['/REQUEST', '/SUCCESS', '/FAILURE']\n  if (!matches) return state;\n\n  const [, routineType, status] = matches;\n\n  return {\n    ...state,\n    // Set error state to the payload only when the status is \"FAILURE\"\n    //    Otherwise set the error state to null\n    [routineType]: status === 'FAILURE' ? action.payload : null\n  };\n};\n\n// Selectors\n\n// Select the whole error state\nexport const selectErrorState = (state: RootState) => state.domainData.error;\n\n// Select error for a given routine\nexport const selectError = (routineType: string) => (state: RootState) => {\n  return state.domainData.error[routineType];\n};\n","import React, { ChangeEvent, useState } from 'react';\nimport { Button, Card, CardBody, CardHeader, Spinner, Table } from 'reactstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchDataA, fetchDataB, routineA, routineB } from '../store/domain-data/demo-data/ducks';\nimport { selectAnyLoading, selectLoading } from '../store/ui/loading/ducks';\nimport { selectError } from '../store/domain-data/error/ducks';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch<any>();\n\n  // Select loading\n  const isLoadingAny = useSelector(selectAnyLoading);\n  const isLoadingA = useSelector(selectLoading(routineA.routineType));\n  const isLoadingB = useSelector(selectLoading(routineB.routineType));\n\n  // Select error\n  const errorA = useSelector(selectError(routineA.routineType));\n  const errorB = useSelector(selectError(routineB.routineType));\n\n  const [makeError, setMakeError] = useState(false);\n\n  return (\n    <div className=\"container-fluid pt-3\">\n      <Card className=\"mb-3\">\n        <CardHeader>Fetch Data</CardHeader>\n        <CardBody>\n          <div className=\"form-check mb-3\">\n            <label className=\"form-check-label\">\n              <input\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                checked={makeError}\n                onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                  setMakeError(event.target.checked);\n                }}\n              />\n              Make Error\n            </label>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col\">\n              <Button\n                className=\"w-100 mb-3\"\n                color={makeError ? 'danger' : 'primary'}\n                onClick={() => dispatch(fetchDataA(makeError)).catch(console.error)}\n              >\n                A\n              </Button>\n            </div>\n            <div className=\"col\">\n              <Button\n                className=\"w-100 mb-3\"\n                color={makeError ? 'danger' : 'secondary'}\n                onClick={() => dispatch(fetchDataB(makeError)).catch(console.error)}\n              >\n                B\n              </Button>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      <Card className=\"mb-3\">\n        <CardHeader>Select Loading</CardHeader>\n        <CardBody>\n          <Table bordered size=\"sm\">\n            <colgroup>\n              <col width=\"30%\" />\n              <col width=\"70%\" />\n            </colgroup>\n            <tbody>\n              <tr>\n                <td>Any</td>\n                <td>{isLoadingAny && <Spinner color=\"info\" />}</td>\n              </tr>\n              <tr>\n                <td>A</td>\n                <td>{isLoadingA && <Spinner color=\"primary\" />}</td>\n              </tr>\n              <tr>\n                <td>B</td>\n                <td>{isLoadingB && <Spinner color=\"secondary\" />}</td>\n              </tr>\n            </tbody>\n          </Table>\n        </CardBody>\n      </Card>\n\n      <Card className=\"mb-3\">\n        <CardHeader>Select Error</CardHeader>\n        <CardBody>\n          <Table bordered size=\"sm\">\n            <colgroup>\n              <col width=\"30%\" />\n              <col width=\"70%\" />\n            </colgroup>\n            <tbody>\n              <tr>\n                <td>A</td>\n                <td className=\"text-danger\">{errorA && errorA.message}</td>\n              </tr>\n              <tr>\n                <td>B</td>\n                <td className=\"text-danger\">{errorB && errorB.message}</td>\n              </tr>\n            </tbody>\n          </Table>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport loadingReducer from './ui/loading/ducks';\nimport demoDataReducer from './domain-data/demo-data/ducks';\nimport errorReducer from './domain-data/error/ducks';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n  ui: combineReducers({\n    loading: loadingReducer\n  }),\n  domainData: combineReducers({\n    demoData: demoDataReducer,\n    error: errorReducer\n  })\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nconst state = store.getState();\n\nexport type RootState = typeof state;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}